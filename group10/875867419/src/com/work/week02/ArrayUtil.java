package com.work.week02;

/**
 * 第二周数据结构作业
 * @author denghuaijun
 *
 */
public class ArrayUtil {

	/**
	 * 给定一个整形数组a , 对该数组的值进行置换
		例如： a = [7, 9 , 30, 3]  ,   置换后为 [3, 30, 9,7]
		如果     a = [7, 9, 30, 3, 4] , 置换后为 [4,3, 30 , 9,7]
	 * @param origin
	 * @return
	 */
	public static int[] reverseArray(int[] origin){
		int[] dest = new int[origin.length];
		for(int i=0;i<origin.length;i++){
			dest[origin.length-1-i] = origin[i];
		}
		return dest;
	}
	
	/**
	 * 现在有如下的一个数组：   int oldArr[]={1,3,4,5,0,0,6,6,0,5,4,7,6,7,0,5}   
	 * 要求将以上数组中值为0的项去掉，将不为0的值存入一个新的数组，生成的新数组为：   
	 * {1,3,4,5,6,6,5,4,7,6,7,5}  
	 * @param oldArray
	 * @return
	 */
	
	public static int[] removeZero(int[] oldArray){
		int[] tempArray = new int[oldArray.length];
		int j = 0;
		for(int i=0; i<oldArray.length; i++){
			if(oldArray[i] != 0){
				tempArray[j] = oldArray[i];
				j++;
			}
		}
		int[] newArray = new int[j];
		System.arraycopy(tempArray, 0, newArray, 0, j);
		return newArray;
	}
	
	/**
	 * 给定两个已经排序好的整形数组， a1和a2 ,  创建一个新的数组a3, 使得a3 包含a1和a2 的所有元素， 并且仍然是有序的
	 * 例如 a1 = [3, 5, 7,8]   a2 = [4, 5, 6,7]    则 a3 为[3,4,5,6,7,8]    , 注意： 已经消除了重复
	 * @param array1
	 * @param array2
	 * @return
	 */
	
	public static int[] merge(int[] array1, int[] array2){
		int[] dest = new int[array1.length + array2.length];
		int i = 0;			//标记array1
		int j = 0;			//标记array2
		int k = 0;			//标记dest
		//array1和array2同时存在时
		while(i < array1.length && j < array2.length){
			if(array1[i] < array2[j]){
				dest[k++] = array1[i++];
				continue;
			}
			if(array1[i] == array2[j]){
				dest[k++] = array1[i++];
				j++;
				continue;
			}
			if(array1[i] > array2[j]){
				dest[k++] = array2[j++];
				continue;
			}
		}
		//只剩array1时
		while(i < array1.length){
			dest[k++] = array1[i++];
		}
		//只剩array2时
		while(j < array2.length){
			dest[k++] = array2[j++];
		}
		return  removeZero(dest);
	}
	/**
	 * 把一个已经存满数据的数组 oldArray的容量进行扩展， 扩展后的新数据大小为oldArray.length + size
	 * 注意，老数组的元素在新数组中需要保持
	 * 例如 oldArray = [2,3,6] , size = 3,则返回的新数组为
	 * [2,3,6,0,0,0]
	 * @param oldArray
	 * @param size
	 * @return
	 */
	public static int[] grow(int [] oldArray,  int size){
		int newLength = oldArray.length + size;
		int[] newArray = new int[newLength];
		System.arraycopy(oldArray, 0, newArray, 0, oldArray.length);
		return newArray;
	}
	
	/**
	 * 斐波那契数列为：1，1，2，3，5，8，13，21......  ，给定一个最大值， 返回小于该值的数列
	 * 例如， max = 15 , 则返回的数组应该为 [1，1，2，3，5，8，13]
	 * max = 1, 则返回空数组 []
	 * @param max
	 * @return
	 */
	public static int[] fibonacci(int max){
		int[] dest = null;
		if(max == 1){
			return dest;
		}
		dest = new int[max+3];
		dest[0] = dest[1] = 1;
		for(int i=2; i<dest.length && (dest[i-1] + dest[i-2])<=max; i++){
			dest[i] = dest[i-1] + dest[i-2];
		}
		
		return removeZero(dest);
	}
	
	/**
	 * 返回小于给定最大值max的所有素数数组
	 * 例如max = 23, 返回的数组为[2,3,5,7,11,13,17,19]
	 * @param max
	 * @return
	 */
	public static int[] getPrimes(int max){
		int[] dest = null;
		if(max < 2){
			return dest;
		}
		dest = new int[max];
		int k = 0;						//标记dest
		for(int i=2;i<=max;i++){	
			boolean flag = true;		//标记是否能被其他数正常
			for(int j=2;j<i;j++){		//i=2时 flag不会更改
				if(i%j == 0){			//i能被其他数整除
					flag = false;
					break;
				}
			}
			if(flag){
				dest[k++] = i;
			}
		}
		return removeZero(dest);
	}
	
	/**
	 * 所谓“完数”， 是指这个数恰好等于它的因子之和，例如6=1+2+3
	 * 给定一个最大值max， 返回一个数组， 数组中是小于max 的所有完数
	 * @param max
	 * @return
	 */
	public static int[] getPerfectNumbers(int max){
		int[] dest = new int[max]; 
		int k = 0;					//标记dest
		for(int i=1; i<=max; i++){
			//判断i是否为完数
			int sum = 0;
			for(int j=1;j<i;j++){
				if(i%j == 0){		//计算出因子
					sum += j;
				}
			}
			if(sum == i){		//因子之和=本身
				dest[k++] = i;
			}
		}
		return removeZero(dest);
	}
	
	/**
	 * 用seperator 把数组 array给连接起来
	 * 例如array= [3,8,9], seperator = "-"
	 * 则返回值为"3-8-9"
	 * @param array
	 * @param s
	 * @return
	 */
	public static String join(int[] array, String seperator){
		StringBuilder temp = new StringBuilder();
		for(int i=0; i<array.length; i++){
			temp.append(array[i]).append(seperator);
		}
		String dest = temp.toString();
		return dest.substring(0, dest.lastIndexOf(seperator));
	}
	
	public static void main(String[] args) {
		int[] arr = getPerfectNumbers(1000);
		for (int i : arr) {
			System.out.println(i);
		}
	}
}
